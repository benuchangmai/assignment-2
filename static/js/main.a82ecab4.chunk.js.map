{"version":3,"sources":["Components/Tab.js","Components/TabList.js","Components/Home.js","Components/Images.js","Components/Videos.js","Components/Projects.js","Components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Tab","addStyling","props","tab","id","activeTab","backgroundColor","className","style","this","onClick","changeTab","bind","title","Component","TabList","tabs","map","indTab","Home","Images","Videos","Projects","Body","displayContent","App","state","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAmBeA,E,4MAhBXC,WAAa,WACT,OAAI,EAAKC,MAAMC,IAAIC,IAAM,EAAKF,MAAMG,UACzB,CAACC,gBAAiB,QAElB,CAACA,gBAAiB,U,uDAI7B,OACI,yBAAKC,UAAU,MAAMC,MAAOC,KAAKR,aAAcS,QAASD,KAAKP,MAAMS,UAAUC,KAAKH,KAAMA,KAAKP,MAAMC,IAAIC,KACnG,4BAAKK,KAAKP,MAAMC,IAAIU,Y,GAXlBC,aCSHC,E,uKAPD,IAAD,OACL,OAAON,KAAKP,MAAMc,KAAKC,KAAI,SAACC,GAAD,OACvB,kBAAC,EAAD,CAAKf,IAAKe,EAAQP,UAAW,EAAKT,MAAMS,UAAWN,UAAW,EAAKH,MAAMG,mB,GAH/DS,aCSPK,E,uKARP,OACI,6BACI,yC,GAJGL,aCUJM,E,uKARP,OACI,6BACI,2C,GAJKN,aCUNO,E,uKARP,OACI,6BACI,2C,GAJKP,aCUNQ,E,uKARP,OACI,6BACI,6C,GAJOR,aCsBRS,E,4MAjBXC,eAAiB,WACb,IAAInB,EAAY,EAAKH,MAAMG,UAC3B,OAAiB,GAAbA,EACO,kBAAC,EAAD,MACa,GAAbA,EACA,kBAAC,EAAD,MACa,GAAbA,EACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,O,uDAIX,OAAQI,KAAKe,qB,GAdFV,aC2CJW,G,wDA3CX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTrB,UAAW,GAEf,EAAKM,UAAY,SAACP,GACd,EAAKuB,SAAS,CACVtB,UAAWD,KAPT,E,qDA8BV,OACI,yBAAKG,UAAW,QACZ,yBAAKA,UAAW,WACZ,kBAAC,EAAD,CAASS,KArBP,CACT,CACIZ,GAAI,EACJS,MAAO,QAEX,CACIT,GAAI,EACJS,MAAO,UAEX,CACIT,GAAI,EACJS,MAAO,UAEX,CACIT,GAAI,EACJS,MAAO,aAMiBF,UAAWF,KAAKE,UAAWN,UAAWI,KAAKiB,MAAMrB,aAE1E,yBAAKE,UAAW,aACZ,kBAAC,EAAD,CAAMF,UAAWI,KAAKiB,MAAMrB,kB,GArC9BS,cCOEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a82ecab4.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Tab extends Component {\n    addStyling = () => {\n        if (this.props.tab.id == this.props.activeTab) {\n            return {backgroundColor: 'gray'}\n        } else {\n            return {backgroundColor: 'white'}\n        }\n    }\n    render() {\n        return (\n            <div className='tab' style={this.addStyling()} onClick={this.props.changeTab.bind(this, this.props.tab.id)}>\n                <h2>{this.props.tab.title}</h2>\n            </div>\n        );\n    }\n}\n\nexport default Tab;","import React, {Component} from 'react';\nimport Tab from './Tab'\n\nclass TabList extends Component {\n    render() {\n        return this.props.tabs.map((indTab) =>(\n            <Tab tab={indTab} changeTab={this.props.changeTab} activeTab={this.props.activeTab}/>\n        ));\n    }\n}\n\nexport default TabList;","import React, {Component} from 'react';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <h2>Home</h2>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, {Component} from 'react';\n\nclass Images extends Component {\n    render() {\n        return (\n            <div>\n                <h2>Images</h2>\n            </div>\n        );\n    }\n}\n\nexport default Images;","import React, {Component} from 'react';\n\nclass Videos extends Component {\n    render() {\n        return (\n            <div>\n                <h2>Videos</h2>\n            </div>\n        );\n    }\n}\n\nexport default Videos;","import React, {Component} from 'react';\n\nclass Projects extends Component {\n    render() {\n        return (\n            <div>\n                <h2>Projects</h2>\n            </div>\n        );\n    }\n}\n\nexport default Projects;","import React, {Component} from 'react';\nimport Home from \"./Home\";\nimport Images from \"./Images\"\nimport Videos from \"./Videos\"\nimport Projects from \"./Projects\"\n\nclass Body extends Component {\n    displayContent = () => {\n        var activeTab = this.props.activeTab\n        if (activeTab == 1) {\n            return <Home/>\n        } else if (activeTab == 2) {\n            return <Images/>\n        } else if (activeTab == 3) {\n            return <Videos/>\n        } else { //can't use else if at last\n            return <Projects/>\n        }\n    }\n    render() {\n        return (this.displayContent());\n    }\n}\n\nexport default Body;","import React, {Component} from 'react';\nimport TabList from \"./Components/TabList\";\nimport Body from \"./Components/Body\";\nimport './App.css'\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            activeTab: 1\n        }\n        this.changeTab = (id) => {\n            this.setState({\n                activeTab: id\n            })\n        }\n    }\n    render() {\n         const tabs = [\n             {\n                 id: 1,\n                 title: 'Home'\n             },\n             {\n                 id: 2,\n                 title: 'Images'\n             },\n             {\n                 id: 3,\n                 title: 'Videos'\n             },\n             {\n                 id: 4,\n                 title: 'Projects'\n             }\n         ]\n        return (\n            <div className={\"page\"}>\n                <div className={\"nav-bar\"}>\n                    <TabList tabs={tabs} changeTab={this.changeTab} activeTab={this.state.activeTab}/>\n                </div>\n                <div className={\"main-body\"}>\n                    <Body activeTab={this.state.activeTab}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}